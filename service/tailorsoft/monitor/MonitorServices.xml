<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <!--   process data point  -->
    <service verb="process" noun="JobRunResults" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="jobName" required="true"/>
            <parameter name="endTime" required="true"/>
            <parameter name="jobRunId" required="true"/>
            <parameter name="results" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="value"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="tailorsoft.service.job.ServiceJobMonitor" value-field="monitor" cache="true">
                <field-map field-name="jobName"/>
            </entity-find-one>
            <if condition="!monitor">
                <!-- No monitor found, abort -->
                <return/>
            </if>

            <if condition="monitor.statusId != 'MonitorActive'" >
                <!-- monitor is not active -->
                <return/>
            </if>

            <set field="jsonResults" from="new groovy.json.JsonSlurper().parseText(results)"/>

            <!-- TODO, switch to JsonPath: https://github.com/json-path/JsonPath -->
            <set field="pathParts" from="monitor.valuePath.split('\\.')"/>
            <iterate list="pathParts" entry="part">
                <if condition="!jsonResults[part].toString()">
                    <return error="true"
                            message="No value found in ${results} at ${monitor.valuePath} value ${jsonResults[part]}"/>
                </if>
                <set field="jsonResults" from="jsonResults[part]"/>
            </iterate>

            <if condition="!jsonResults || !jsonResults.toString().isNumber()">
                <return error="true" message="'${jsonResults.toString()}' is not a valid result found in Job ${monitor.jobName} for Monitor ${monitor.monitorId}"/>
            </if>

            <set field="doubleValue" from="Float.parseFloat(jsonResults.toString())"/>
            <if condition="doubleValue == null">
                <return error="true" message="No double value found at path: ${monitor.valuePath} in ${results} "/>
            </if>

            <!-- store in elasticsearch -->
            <service-call name="tailorsoft.monitor.MonitorServices.save#Datapoint"
                          in-map="[date:endTime, value:doubleValue, indexName:monitor.indexName]"/>

            <if condition="monitor.algorithmEnumId == 'ALGO_BOUNDS'">
                <service-call
                        name="tailorsoft.monitor.MonitorServices.process#DatapointBounds"
                        in-map="[indexName:monitor.indexName, value:doubleValue, date:endDate, jobName:jobName, jobRunId:jobRunId, monitorId: monitor.monitorId, ]"/>
            </if>
        </actions>
    </service>

    <!-- Save date point in elasticsearh   -->
    <service verb="save" noun="Datapoint" authenticate="anonymous-view">
        <in-parameters>
            <parameter name="indexName" required="true"/>
            <parameter name="date" required="true"/>
            <parameter name="value" required="true"/>
        </in-parameters>
        <actions>
            <set field="json" from="[:]"/>
            <script>
                <![CDATA[
                import org.moqui.context.ExecutionContext

                ExecutionContext ec = context.ec
                client = ec.elastic.getDefault()

                //use the default timestamp value
                // @TODO: Parse date from endTime service
                json.put("@timestamp", new Date())
                // value from the service
                json.put("value", value)

                try {
                    Map createIndexResult = ec.service.sync().name("tailorsoft.monitor.MonitorServices.create#Index").parameter("indexName", indexName).call()

                    if(createIndexResult.result == "INDEX_NOT_CREATED"){
                        logger.error("Can't create the index with name: ${indexName}")
                    }else{
                        client.index(indexName, UUID.randomUUID().toString(), json)
                    }
                } finally {

                }
                ]]>
                    </script>
            <log message="\n ====== ElasticSearch Saved:[ ${indexName}, ${date}, ${value} ]"/>
        </actions>
    </service>

    <!--  search Elasticsearch data  -->
    <service verb="process" noun="DatapointBounds" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="jobName"/>
            <parameter name="monitorId"/>
            <parameter name="jobRunId"/>
            <parameter name="indexName"/>
            <parameter name="value"/>
        </in-parameters>
        <out-parameters>
            <parameter name="value"/>
        </out-parameters>
        <actions>
            <log message="\n ======= bounds ${indexName}, ${value}, ${jobName}, ${context} ${monitorId} "/>
            <set field="messageData" from="[:]"/>
            <entity-find-one entity-name="tailorsoft.service.job.ServiceJobMonitorBounds" value-field="monitorBounds" cache="true">
                <field-map field-name="monitorId"/>
            </entity-find-one>

            <entity-find entity-name="tailorsoft.service.job.ServiceJobMonitorAlert" list="alertList" limit="1">
                <econdition field-name="monitorId" from="monitorId"/>
                <order-by field-name="-fromDate"/>
            </entity-find>

            <log message="\n ======= entity bounds: ${monitorBounds}"/>

            <script>
                <![CDATA[
                import org.moqui.context.ExecutionContext
                import javax.naming.directory.SearchControls

                sleep(1200);

                ExecutionContext ec = context.ec

                String sendNotification(data) {
                    logger.info("notification ${data}")

                    Map notificationData = [
                            id              : jobRunId,
                            jobName         : jobName,
                            jobRunId        : jobRunId,
                            monitorId       : monitorId,
                            fromDate        : new Date(),
                            value           : value,
                            status          : 'open',
                            lastUpdatedStamp: new Date(),
                            from            : 'noreply@moqui.org'
                    ]
                    notificationId = ec
                            .makeNotificationMessage()
                            .topic(monitorId)
                            .type("danger")
                            .title("Alert Bounds")
                            .message(notificationData)
                            .userGroupId("ALL_USERS")
                            .send()
                            .getNotificationMessageId()

                    return notificationId
                }

                try {
                    int alertCount = Integer.parseInt(monitorBounds.count.toString())


                    // hits from elasticsearch
                    Map searchMap = ["sort":["@timestamp":"desc"], "size":alertCount]
                    indexHits = ec.service.sync().name("tailorsoft.monitor.MonitorServices.get#IndexHits").parameters(["indexName":indexName, "searchMap":searchMap]).call()
                    hits = indexHits.hitList

                    logger.info("\n ======== ES results")
                    logger.info(hits.toString())

                    Float upperBound = Float.parseFloat(monitorBounds.upper.toString())
                    Float lowerBound = Float.parseFloat(monitorBounds.lower.toString())
                    int boundsCount = Integer.parseInt(monitorBounds.count.toString());
                    int size = hits.size();


                    if (size < boundsCount) {
                        // too few points to evaluate
                        return false;
                    }

                    Boolean upperBoundAllValid = true;
                    Boolean lowerBoundAllValid = true;

                    for (int i = 0; i < size; i++) {
                        Map hit = hits[i]._source
                        Float value = Float.parseFloat(hit.value.toString())

                        if (value < upperBound) {
                            upperBoundAllValid = false;
                        }

                        if (value > lowerBound) {
                            lowerBoundAllValid = false;
                        }
                    }

                    logger.info('===== upper and lower bounds')
                    logger.info(upperBoundAllValid.toString())
                    logger.info(lowerBoundAllValid.toString())


                    if (upperBoundAllValid || lowerBoundAllValid) {
                        Map hit = hits[0]._source
                        Float value = Float.parseFloat(hit.value.toString())

                        if (alertList.size() > 0 && alertList[0].statusId.toString() == 'SjmOpen') {
                            logger.info('=== last alert still open')
                            // @todo do nothing
                            return false;
                        }

                        notificationId = sendNotification([monitorId: monitorId, value: value]);

                        ec.service.sync()
                                .name("create#tailorsoft.service.job.ServiceJobMonitorAlert")
                                .parameters([
                                        id              : jobRunId,
                                        monitorId       : monitorId,
                                        jobName         : jobName,
                                        jobRunId        : jobRunId,
                                        fromDate        : new Date(),
                                        value           : value,
                                        statusId        : 'SjmOpen',
                                        notification    : notificationId,
                                        lastUpdatedStamp: new Date(),
                                ])
                                .call()
                        logger.info('==== notification sent')

                    }

                    if (alertList.size() > 0 && alertList[0].statusId.toString() == 'SjmOpen') {
                        currentAlert = alertList[0];

                        Boolean restoreValid = true;

                        for (int i = 0; i < size; i++) {
                            Map hit = hits[i]._source
                            Float value = Float.parseFloat(hit.value.toString())

                            logger.info("alertId: ${currentAlert.id}- ${i.toString()} - ${value.toString()}")

                            if (value > upperBound || value < lowerBound) {
                                restoreValid = false;
                            }
                        }

                        if (restoreValid) {

                            ec.service.sync()
                                    .name("update#tailorsoft.service.job.ServiceJobMonitorAlert")
                                    .parameters([id: currentAlert.id, statusId: 'SjmClosed', thruDate: new Date()])
                                    .call()
                        }
                    }
                } finally {
                    // TODO close client?
                }
                ]]>
            </script>
        </actions>
    </service>

    <!-- Get charts info   -->
    <service verb="get" noun="Monitors" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="fromDate"/>
            <parameter name="thruDate"/>
            <parameter name="monitorId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="value"/>
        </out-parameters>
        <actions>
            <set field="res" from="[]"/>
            <!-- TODO restrict by Org -->
            <entity-find entity-name="tailorsoft.service.job.ServiceJobMonitor" list="monitorList">
                <econdition field-name="statusId" value="MonitorDeleted"  operator="not-equals"/>
            </entity-find>

            <set field="fromDateFormated" from="[]"/>
            <set field="thruDateFormated" from="[]"/>
            <script>
                import java.text.SimpleDateFormat

                dateFormat = new SimpleDateFormat("yyyy-MM-dd")
                fromDateFormated = dateFormat.parse(fromDate)
                thruDateFormated = dateFormat.parse(thruDate)
            </script>

            <entity-find entity-name="tailorsoft.service.job.ServiceJobMonitorAlert" list="alertsList">
                <econdition field-name="monitorId" value="poll_temperature"/>
                <econdition field-name="fromDate" operator="greater" from="fromDateFormated"/>
                <econdition field-name="fromDate" operator="less" from="thruDateFormated"/>
            </entity-find>


            <log message="============================== ${alertsList} ${fromDate} ${thruDate}"/>

            <script>
                 <![CDATA[
                import org.moqui.context.ExecutionContext
                import groovy.json.JsonOutput
                import java.text.SimpleDateFormat;

                ExecutionContext ec = context.ec
                client = ec.elastic.getDefault()

                logger.info("=================")
                logger.info(fromDate)
                logger.info(thruDate)

                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");


                Date fromDateObject = formatter.parse(fromDate)
                Date thruDateObject = formatter.parse(thruDate)

                if (monitorId) {
                    Map monitorEntity = ec.entity.find("tailorsoft.service.job.ServiceJobMonitor").condition("monitorId", monitorId).one()
                    Map monitorBoundsEntity = ec.entity.find("tailorsoft.service.job.ServiceJobMonitorBounds").condition("monitorId", monitorId).one()
                    String indexName = monitorEntity.indexName

                    Map searchMap = ["sort":["@timestamp":["order":"desc"]], "query": ["range":["@timestamp":["gte":fromDate,"lte":thruDate]]], "size":9999]

                    indexHits = ec.service.sync().name("tailorsoft.monitor.MonitorServices.get#IndexHits").parameters([indexName:indexName, searchMap:searchMap]).call()

                    alertsList_xafind = ec.entity.find("tailorsoft.service.job.ServiceJobMonitorAlert")
                            .condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("monitorId", "equals", monitorId, monitorId, null, false, false, false, "false")).condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("fromDate", "greater", fromDateFormated, null, null, false, false, false, "false")).condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("fromDate", "less", thruDateFormated, null, null, false, false, false, "false"))
                    alertsList = alertsList_xafind.list()

                    res.push([jobName: monitorId, monitorId: monitorId, indexName: indexName, data: indexHits.hitList, bounds: monitorBoundsEntity, fromDate: fromDateObject, thruDate: thruDateObject, 'alerts': alertsList])

                } else {
                    for (int i = 0; i < monitorList.size(); i++) {
                        String indexName = monitorList[i].indexName
                        String monitorIdStr = monitorList[i].monitorId
                        String monitorTitle = monitorList[i].title

                        Map bounds = ec.entity.find("tailorsoft.service.job.ServiceJobMonitorBounds").condition("monitorId", monitorIdStr).one()

                        Map searchMap = ["sort":["@timestamp":["order":"desc"]], "query": ["range":["@timestamp":["gte":fromDate,"lte":thruDate]]], "size":9999]

                        indexHits = ec.service.sync().name("tailorsoft.monitor.MonitorServices.get#IndexHits").parameters([indexName:indexName, searchMap:searchMap]).call()

                        alertsList_xafind = ec.entity.find("tailorsoft.service.job.ServiceJobMonitorAlert")
                                .condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("monitorId", "equals", monitorId, monitorIdStr, null, false, false, false, "false")).condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("fromDate", "greater", fromDateFormated, null, null, false, false, false, "false")).condition((org.moqui.entity.EntityCondition) ec.entity.conditionFactory.makeActionConditionDirect("fromDate", "less", thruDateFormated, null, null, false, false, false, "false"))
                        alertsList = alertsList_xafind.list()

                        res.push([jobName: monitorIdStr, monitorId: monitorIdStr, monitorTitle: monitorTitle, indexName: indexName, data: indexHits.hitList, bounds: bounds, fromDate: fromDateObject, thruDate: thruDateObject, 'alerts': alertsList])
                    }
                }
                value = res
                ]]>
            </script>
        </actions>
    </service>

    <!-- process single Datapoint   -->
    <service verb="process" noun="DataPoint" authenticate="anonymous-view">
        <in-parameters>
            <parameter name="monitorId" required="true"/>
            <parameter name="pointValue" required="true"/>
        </in-parameters>
        <actions>
            <log message="==== ${monitorId} ${value}"/>

            <entity-find-one entity-name="tailorsoft.service.job.ServiceJobMonitor" value-field="monitor" cache="true">
                <field-map field-name="monitorId"/>
            </entity-find-one>
            <if condition="!monitor">
                <log message="no monitor '${monitorId}' found, abort"/>
                <!-- No monitor found, abort -->
                <return/>
            </if>

            <if condition="monitor.statusId != 'MonitorActive'" >
                <!-- monitor is not active -->
                <return/>
            </if>

            <set field="doubleValue" from="Float.parseFloat(pointValue)"/>
            <set field="endDate" from="new Date()"/>

            <!-- store in elasticsearch -->
            <service-call name="tailorsoft.monitor.MonitorServices.save#Datapoint"
                          in-map="[date: endDate, value:doubleValue, indexName:monitor.indexName]"/>

            <if condition="monitor.algorithmEnumId == 'ALGO_BOUNDS'">
                <service-call
                        name="tailorsoft.monitor.MonitorServices.process#DatapointBounds"
                        in-map="[indexName:monitor.indexName, value:doubleValue, date:endDate, monitorId: monitor.monitorId, ]"/>
            </if>

        </actions>
    </service>

    <!-- get alerts by active monitor   -->
    <service verb="get" noun="Alerts" authenticate="anonymous-view" >
        <in-parameters>

        </in-parameters>
        <out-parameters>
            <parameter name="alerts"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="tailorsoft.service.job.ServiceJobMonitorAlertDetails" list="alerts">
                <econdition field-name="monitorStatusId" value="MonitorDeleted"  operator="not-equals"/>
            </entity-find>
        </actions>
    </service>

    <service verb="search" noun="Parties" authenticate="anonymous-view">
        <in-parameters>
            <parameter name="term"/>
        </in-parameters>
        <out-parameters>
            <parameter name="options"/>
        </out-parameters>
        <actions>
            <if condition="term">
                <then>
                    <entity-find entity-name="tailorsoft.service.job.ServiceJobPartyName" list="options">
                        <econdition field-name="partyName" operator="like" value="%${term}%" ignore-case="true"/>
                    </entity-find>
                </then>
                <else>
                    <log level="warn" message="Can't search parties by an empty term."/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="Index">
        <in-parameters>
            <parameter name="indexName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="result"/>
        </out-parameters>
        <actions>
            <script>
                <![CDATA[

                    client = ec.elastic.getDefault()

                    if (!client.indexExists(indexName)) {
                        try {
                            Map indexMapping = ["properties":["@timestamp":["type":"date"], "value":["type":"float"]]];
                            client.createIndex(indexName, indexMapping, (String) null)
                            result = "INDEX_CREATED"
                        } catch (Exception e) {
                            logger.error("Error checking and creating ${indexName} ES index", e)
                            result = "INDEX_NOT_CREATED"
                        }
                    }else{
                        result = "INDEX_ALREADY_EXIST"
                    }
                ]]>
            </script>
        </actions>
    </service>

    <service verb="get" noun="IndexHits">
        <in-parameters>
            <parameter name="indexName"/>
            <parameter name="searchMap" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="hitList"/>
        </out-parameters>
        <actions>
            <set field="hitList" from="[]"/>
            <script>
                <![CDATA[

                    client = ec.elastic.getDefault()

                    if (client.indexExists(indexName)) {
                        try {
                            hitList = client.searchHits(indexName, searchMap)
                        } catch (Exception e) {
                            logger.error("Can't find hits in the index: ${indexName}", e)
                        }
                    }else{
                        logger.warn("Can't find index with name: ${indexName}", e)
                    }
                ]]>
            </script>
        </actions>
    </service>

    <service verb="get" noun="QueryFromLastJobRun" authenticate="anonymous-all" validate="false">
        <in-parameters>
            <parameter name="query" required="true" />
            <parameter name="lastRunTime" type="Timestamp"/>
        </in-parameters>
        <out-parameters>
            <parameter name="results" />
        </out-parameters>
        <actions>
            <service-call name="tailorsoft.monitor.MonitorServices.get#QueryResults"
                          in-map="[startDate:lastRunTime, endDate:ec.user.nowTimestamp, query:query]"
                          out-map="results"
            />
        </actions>
    </service>

<!--    Validate false, as with true it filters out HTML elements such as < and > -->
    <service verb="get" noun="QueryResults" authenticate="true" validate="false">
        <in-parameters>
            <parameter name="groupName" default="transactional" />
            <parameter name="startDate" type="Timestamp" />
            <parameter name="endDate" type="Timestamp" />
            <parameter name="query" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="count" type="Integer"/>
            <parameter name="result" type="List"/>
        </out-parameters>
        <actions>
            <set field="count" from="0"/>
            <set field="result" from="[]"/>
            <script><![CDATA[
                import java.sql.Connection
                import org.moqui.context.ExecutionContext

                import java.util.logging.Logger

                ExecutionContext ec = context.ec
                Connection con = ec.getEntity().getConnection(groupName)
                def statement = con.createStatement()

                def logger = ec.getLogger()

                //Create a timestamp literal http://www.h2database.com/html/grammar.html#timestamp
                query = query.replace("{FROM}",
                        "TIMESTAMP '" + startDate.toString() + "'")
                        .replace("{THRU}",
                                "TIMESTAMP '" + endDate.toString() + "'")

                def queryrs = statement.executeQuery(query)

                def meta = queryrs.getMetaData()
                def columns = meta.getColumnCount()

                while (queryrs.next()) {
                    Map<String, Object> row = new HashMap<>()
                    for (int i = 1; i <= columns; ++i) {
                        row.put(meta.getColumnName(i), queryrs.getObject(i))
                    }
                    count++
                    result.add(row);
                }
                ]]></script>
        </actions>
    </service>
</services>
